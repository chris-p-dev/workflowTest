name: Add JIRA Priority Label

on:
  pull_request:
    types: [opened, synchronize]
env:
  ENVIRONMENT: JIRA_ACCESS_TOKEN

jobs:
  add-label:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Validate Secrets
        run: |
          echo "JIRA_USERNAME: ${JIRA_USERNAME:0:2}***"
          echo "JIRA_API_TOKEN: ${JIRA_API_TOKEN:0:2}***"
          echo "JIRA_BASE_URL: ${JIRA_BASE_URL:0:2}***"
          echo "BASIC_AUTH_TOKEN: ${BASIC_AUTH_TOKEN:0:2}***"
          echo "All required secrets are set."
        shell: bash

      - name: Extract JIRA Ticket ID
        id: extract_ticket_id
        run: |
          PR_BODY=$(jq -r .pull_request.body $GITHUB_EVENT_PATH)
          FIRST_LINE=$(echo "$PR_BODY" | head -n 1)
          if [[ "$FIRST_LINE" =~ ([A-Z]+-[0-9]+) ]]; then
            echo "::set-output name=ticket_id::${BASH_REMATCH[1]}"
          else
            echo "No JIRA ticket ID found in the PR body."
            exit 1
          fi
        shell: bash

      - name: Get JIRA Ticket Priority
        id: get_ticket_priority
        run: |
          TICKET_ID=${{ steps.extract_ticket_id.outputs.ticket_id }}
          RESPONSE=$(curl -s \
                      -H "Authorization: Basic ${{ secrets.BASIC_AUTH_TOKEN }}" \
                      -H "Accept: application/json" \
                      ${{ secrets.JIRA_BASE_URL }}/rest/api/2/issue/$TICKET_ID)
          echo "JIRA API response: $RESPONSE"

          PRIORITY=$(echo $RESPONSE | jq -r .fields.priority.name)
          if [[ "$PRIORITY" == "null" ]]; then
            echo "Error fetching JIRA ticket priority. Response: $RESPONSE"
            exit 1
          fi
          echo "priority=${PRIORITY}" >> $GITHUB_ENV
        shell: bash

      - name: Add Priority Urgent Label
        if: env.priority == 'High' || env.priority == 'Blocker'
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          LABEL="Priority: Urgent"

          # Fetch current labels on the PR
          LABELS=$(gh pr view $PR_NUMBER --json labels --jq '.labels[].name')

          if [[ "$LABELS" != *"$LABEL"* ]]; then
            gh pr edit $PR_NUMBER --add-label $LABEL
            echo "Added $LABEL label to PR #$PR_NUMBER"
          else
            echo "PR #$PR_NUMBER already has the $LABEL label"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash

      - name: Remove Priority Urgent Label
        if: env.priority != 'High' && env.priority != 'Blocker'
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          LABEL="Priority: Urgent"

          # Fetch current labels on the PR
          LABELS=$(gh pr view $PR_NUMBER --json labels --jq '.labels[].name')

          if [[ "$LABELS" == *"$LABEL"* ]]; then
            gh pr edit $PR_NUMBER --remove-label $LABEL
            echo "Removed $LABEL label from PR #$PR_NUMBER"
          else
            echo "PR #$PR_NUMBER does not have the $LABEL label"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
